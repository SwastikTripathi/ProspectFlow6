
import type { Database } from '@/lib/database.types';
import { createBrowserClient } from '@supabase/ssr';

// These console.logs will appear in your SERVER terminal when Next.js starts or when this module is first loaded.
// They help diagnose if Next.js is picking up the .env.local variables AT ALL.
console.log(
  '[supabaseClient.ts] Attempting to read NEXT_PUBLIC_SUPABASE_URL from process.env:',
  process.env.NEXT_PUBLIC_SUPABASE_URL
);
console.log(
  '[supabaseClient.ts] Attempting to read NEXT_PUBLIC_SUPABASE_ANON_KEY from process.env:',
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
);

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  // This console.error will appear in your SERVER terminal if the variables are missing.
  console.error(
    '[supabaseClient.ts] CRITICAL ERROR: NEXT_PUBLIC_SUPABASE_URL or NEXT_PUBLIC_SUPABASE_ANON_KEY is UNDEFINED in the running Next.js process.env.'
  );
  // This error will be thrown and likely crash the component trying to use Supabase,
  // providing a clear error message in the browser/server logs.
  throw new Error(
    'Supabase URL or Anon Key is missing from environment variables. NEXT_PUBLIC_SUPABASE_URL and/or NEXT_PUBLIC_SUPABASE_ANON_KEY are undefined. See SERVER CONSOLE logs for details. If using Firebase Studio, check its specific documentation for setting local development environment variables, as .env.local might be insufficient.'
  );
}

// Note: The Database generic type will come from the types generated by `supabase gen types typescript`.
// Make sure that file exists and is correctly populated.
export const supabase = createBrowserClient<Database>(
  supabaseUrl!,
  supabaseAnonKey!
);
